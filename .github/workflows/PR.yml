name: PR

on:
  pull_request:
    branches:
      - main
    paths:
      - ni_python_styleguide/**
      - poetry.lock
      - pyproject.toml
      - docs/Coding-Conventions.md
      - .github/workflows/PR.yml

env:
  # You also need to change the version in ./Publish-Package.yml
  POETRY_VERSION: 1.0.4
  # To fix an error when running Poetry on Windows
  # (https://github.com/python-poetry/poetry/issues/2629),
  # we set Poetry's cache directory to .poetry_cache in the current directory.
  # It makes it easier to later remove the virtualenv when it's broken.
  # Absolute path is necessary to avoid this issue:
  # https://github.com/python-poetry/poetry/issues/3049
  POETRY_CACHE_DIR: ${{ github.workspace }}/.poetry_cache

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.9 # Just use the latest
      - uses: Gr1N/setup-poetry@v4
        with:
          # poetry-version: ${{ env.POETRY_VERSION }}
      # - uses: actions/cache@v2
      #   with:
      #     path: ~/.cache/pypoetry/virtualenvs
      #     key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      # @TODO: This is a workaround for there not being a way to check the lock file
      #   See: https://github.com/python-poetry/poetry/issues/453
      - name: Check for lock changes
        run: |
          PYTHONPATH="${PYTHONPATH}:${HOME}/.poetry/lib" \
          python -c "from poetry.factory import Factory; \
            locker = Factory().create_poetry('.').locker; \
            exit(0) if locker.is_locked() and locker.is_fresh() else exit(1)" \
            && echo 'OK'
        shell: bash

      - name: Install the Package
        run: poetry install -vvv
      - name: Lint the Code
        run: poetry run ni-python-styleguide lint

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v4
        with:
          # poetry-version: ${{ env.POETRY_VERSION }}
      # - uses: actions/cache@v2
      #   with:
      #     path: ~/.cache/pypoetry/virtualenvs
      #     key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Install the Package
        run: poetry install -vvv

      - name: Run tests
        run: poetry run pytest -v
